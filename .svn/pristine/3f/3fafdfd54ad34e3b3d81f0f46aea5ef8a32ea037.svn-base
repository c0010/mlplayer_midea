// ////////////////////////////////////////////////////////////////////////////////  Copyright (c) 2009,//  All rights reserved.//  //  FileName://  Description://  Author:// //////////////////////////////////////////////////////////////////////////////#include "stdafx.h"#include "cmexamlist.h"#include "tinyxml.h"#include "cmsession.h"#include "utf8ncpy.h"#include "cmfile.h"CMExamList::CMExamList():CMHandler<TExamListItem>(){	sprintf(m_tablename,"examlist");}CMExamList::~CMExamList(){}void CMExamList::SetListener(IMUpdateDataListener* pListener){	m_pListener = pListener;}BOOL CMExamList::GetList(){    if (IsRunning())        return FALSE;    sprintf(m_tablename,"examlist");    CMString sParam;    return Request(SERVICE_GETEXAMLIST, sParam);}BOOL CMExamList::GetTrainList(const char* sTrainID){    if (IsRunning())        return FALSE;    sprintf(m_tablename,"examlist");    char sParam[200];	memset(sParam, 0, 200);	snprintf(sParam, 200, "id=%s",sTrainID);    return Request(SERVICE_GETMYTRAINCXAMLIST, sParam);}BOOL CMExamList::UpdateItem(TExamListItem& item){    return DoUpdate(item);}BOOL CMExamList::GetExamById(const char * examId){    if(!m_pSession)		m_pSession = new CMSession(this);	if(m_pSession->IsRunning())        return FALSE;            if (strlen(examId) == 0) {        return FALSE;    }        char sParam[200];    snprintf(sParam,200,"id=%s",examId);        sprintf(m_tablename,"examlist");    SetPaging(FALSE);        return Request(SERVICE_GETEXAMBYID,sParam);}TExamListItem::TExamListItem(){    nRequirecount = 0;    nUncompletecount = 0;    sTestscores = "0";    nRanking = 0;    nUsercompletecount = 0;    nQuestioncount = 0;    nDuration = -1;    nRemainTime = -1;    nRequirecount = 0;    nPassmark = 0;    nFullmark = 0;    nTotalNumber = 0;    nCurrNumber = 0;}TExamListItem::~TExamListItem(){    }TExamListItem& TExamListItem::operator=(const TiXmlElement* right){	const CHAR* pStr = NULL;    	pStr = right->Attribute("id");	if(pStr)        sID = pStr;    	pStr = right->Attribute("title");	if(pStr)        sTitle = pStr;        right->QueryIntAttribute("requirecount", &nRequirecount);        right->QueryIntAttribute("uncompletecount", &nUncompletecount);        pStr = right->Attribute("testscores");    if(pStr)    	sTestscores = pStr;    right->QueryIntAttribute("ranking", &nRanking);    	pStr = right->Attribute("desc");	if(pStr)        sDesc = pStr;    	pStr = right->Attribute("category");	if(pStr)        sCategory = pStr;        int tmp = 0;    right->QueryIntAttribute("viewanswer", &tmp);    bViewAnswer =  tmp;        right->QueryIntAttribute("usercompletecount", &nUsercompletecount);    	pStr = right->Attribute("pubdate");	if(pStr)        sPubdate = pStr;        pStr = right->Attribute("completetime");	if(pStr)        sCompletetime = pStr;    	right->QueryIntAttribute("questioncount",&nQuestioncount);        right->QueryIntAttribute("duration", &nDuration);        if(nDuration == 0)    	nDuration = -1;    if(nDuration == -1)    	nRemainTime = nDuration;    else    	nRemainTime = nDuration*60;        nCurrIndex = 0;    	right->QueryIntAttribute("passmark",&nPassmark);    	right->QueryIntAttribute("fullmark",&nFullmark);    	pStr = right->Attribute("rankurl");	if(pStr)        sRankurl = pStr;	right->QueryIntAttribute("totalnumber",&nTotalNumber);	right->QueryIntAttribute("currnumber",&nCurrNumber);    return *this;}BOOL CMExamList::DoCreate(sqlite3* db){	if (db == NULL)  return FALSE;	if (strcmp(m_tablename, "") == 0) return FALSE;    	char *errorMsg;	char sql[1024];	snprintf(sql,sizeof(sql),"CREATE TABLE IF NOT EXISTS %s(_id INTEGER PRIMARY KEY AUTOINCREMENT,id TEXT UNIQUE,title TEXT,requirecount INTEGER,uncompletecount INTEGER,testscores TEXT,ranking INTEGER,desc TEXT,category TEXT,viewanswer INTEGER,usercompletecount INTEGER,pubdate TEXT,questioncount INTEGER,duration INTEGER,remaintime INTEGER,nindex INTEGER,passmark INTEGER,fullmark INTEGER,rankurl TEXT,completetime TEXT,totalnumber INTEGER,currnumber INTEGER)", m_tablename);    	if (sqlite3_exec(db, sql, NULL, NULL, &errorMsg) == SQLITE_OK)    {		return TRUE ;	}	else	{		CM_ERRP("exec %s failed.error:%s", sql, errorMsg);		return FALSE;	}}BOOL CMExamList::DoRefresh(TExamListItem& obj){    BOOL ret = FALSE;        m_mutex.Lock();    for (int i = 0; i < m_lstItem->size(); i++)    {        TExamListItem& item = m_lstItem->at(i);                if (strcmp(item.sID.c_str(), obj.sID.c_str()) == 0) {            obj= item;            ret = TRUE;            break;        }    }    m_mutex.UnLock();    	if (strcmp(m_tablename, "") == 0)        return FALSE;    	//根据obj的sID属性更新	sqlite3_stmt *stmt;	CHAR sql[1024];	sql[0] = '\0';    	sqlite3*db=CheckTable(m_tablename);    	if (db == NULL)		return FALSE;    	snprintf(sql,sizeof(sql),"SELECT id,title,requirecount,uncompletecount,testscores,ranking,desc,category,viewanswer,usercompletecount,pubdate,questioncount,duration,remaintime,nindex,passmark,fullmark,rankurl,completetime,totalnumber,currnumber FROM %s WHERE id = ?", m_tablename);    	if (sqlite3_prepare_v2(db, sql, -1, &stmt, NULL) == SQLITE_OK)	{		BindParam(stmt, 1, obj.sID.c_str());                if (sqlite3_step(stmt) == SQLITE_ROW)        {        	obj.sID = (const char*)sqlite3_column_text(stmt, 0);			//obj.sTitle = (const char*)sqlite3_column_text(stmt, 1);			//obj.nRequirecount = sqlite3_column_int(stmt, 2);			//obj.nUncompletecount = sqlite3_column_int(stmt, 3);			//obj.nTestscores = sqlite3_column_int(stmt, 4);		   // obj.nRanking = sqlite3_column_int(stmt, 5);		   // obj.sDesc = (const char*)sqlite3_column_text(stmt, 6);		   // obj.sCategory = (const char*)sqlite3_column_text(stmt, 7);			//obj.bViewAnswer = sqlite3_column_int(stmt, 8);//			obj.nUsercompletecount = sqlite3_column_int(stmt, 9);		   // obj.sPubdate = (const char*)sqlite3_column_text(stmt, 10);		   // obj.nQuestioncount = sqlite3_column_int(stmt, 11);		   // obj.nDuration = sqlite3_column_int(stmt, 12);			obj.nRemainTime = sqlite3_column_int(stmt, 13);			obj.nCurrIndex = sqlite3_column_int(stmt, 14);			//obj.nPassmark = sqlite3_column_int(stmt, 15);			//obj.nFullmark = sqlite3_column_int(stmt, 16);		   // obj.sRankurl = (const char*)sqlite3_column_text(stmt, 17);//			obj.sCompletetime = (const char*)sqlite3_column_text(stmt, 18);//            obj.nTotalNumber = sqlite3_column_int(stmt, 19);//            obj.nCurrNumber = sqlite3_column_int(stmt, 20);        }                sqlite3_finalize(stmt);	}	else	{		CM_ERRP("sqlite3_step %s failed.error:%s", sql, sqlite3_errmsg(db));	}    	return ret;}BOOL CMExamList::DoUpdate(const TExamListItem& obj){    BOOL ret = FALSE;        //更新对象    m_mutex.Lock();        for (int i = 0; i < m_lstItem->size(); i++)    {        TExamListItem& item = m_lstItem->at(i);                if (strcmp(item.sID.c_str(), obj.sID.c_str()) == 0) {            item = obj;            ret = TRUE;            break;        }    }    m_mutex.UnLock();    	if (strcmp(m_tablename, "") == 0)        return FALSE;        //保存入数据库    sqlite3*db=CheckTable(m_tablename);        if(db)    {		sqlite3_stmt *stmt;		CHAR sql[512];		snprintf(sql,sizeof(sql),"REPLACE INTO %s(id, title, requirecount, uncompletecount, testscores, ranking, desc, category, viewanswer, usercompletecount, pubdate, questioncount, duration, remaintime, nindex, passmark, fullmark, rankurl, completetime,totalnumber ,currnumber) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", m_tablename);                if (sqlite3_prepare_v2(db, sql, -1, &stmt, NULL) == SQLITE_OK)        {            BindParam(stmt, 1, obj.sID.c_str());            BindParam(stmt, 2, obj.sTitle.c_str());            BindParam(stmt, 3, obj.nRequirecount);            BindParam(stmt, 4, obj.nUncompletecount);            BindParam(stmt, 5, obj.sTestscores.c_str());            BindParam(stmt, 6, obj.nRanking);            BindParam(stmt, 7, obj.sDesc.c_str());            BindParam(stmt, 8, obj.sCategory.c_str());            BindParam(stmt, 9, obj.bViewAnswer);            BindParam(stmt, 10,obj.nUsercompletecount);            BindParam(stmt, 11,obj.sPubdate.c_str());            BindParam(stmt, 12,obj.nQuestioncount);            BindParam(stmt, 13,obj.nDuration);            BindParam(stmt, 14,obj.nRemainTime);            BindParam(stmt, 15,obj.nCurrIndex);            BindParam(stmt, 16,obj.nPassmark);            BindParam(stmt, 17,obj.nFullmark);            BindParam(stmt, 18,obj.sRankurl.c_str());            BindParam(stmt, 19, obj.sCompletetime.c_str());            BindParam(stmt, 20,obj.nTotalNumber);            if(sqlite3_step(stmt) == SQLITE_DONE)            {                ret = TRUE;            }            else            {            	CM_ERRP("sqlite3_step %s failed.error:%s", sql, sqlite3_errmsg(db));            }        }        else        {        	CM_ERRP("prepare %s failed.error:%s", sql, sqlite3_errmsg(db));        }                sqlite3_finalize(stmt);    }        return ret;}BOOL CMExamList::DoPutItem(TiXmlElement* pItem, sqlite3* db, TExamListItem& item){    item = pItem;    return TRUE;}BOOL CMExamList::DoGetCacheItems(sqlite3* db){	return TRUE;}void CMExamList::DoClear(){    m_mutex.Lock();    if(m_lstItem)        m_lstItem->clear();	m_mutex.UnLock();    	CHAR sql[1024];	sql[0] = '\0';	char* errorMsg;	sqlite3_stmt *stmt;        sqlite3* db = CheckTable(m_tablename);    	snprintf(sql,sizeof(sql),"DELETE FROM %s", m_tablename);    	if (sqlite3_prepare_v2(db, sql, -1, &stmt, NULL) == SQLITE_OK)	{		if (sqlite3_step(stmt) != SQLITE_DONE)		{			CM_ERRP("exec %s failed.error:%s", sql, errorMsg);		}        		sqlite3_finalize(stmt);	}}//判断exam是否在数据库中存在BOOL CMExamList::ExamExistAtList(const char *eid){    BOOL ret = FALSE;    	if (strcmp(m_tablename, "") == 0)        return FALSE;        sqlite3_stmt *stmt;	CHAR sql[1024];	sql[0] = '\0';    	sqlite3*db = CheckTable(m_tablename);    	if (db == NULL)		return FALSE;    	snprintf(sql,sizeof(sql),"SELECT COUNT(*) FROM %s WHERE id=?", m_tablename);    	if (sqlite3_prepare_v2(db, sql, -1, &stmt, NULL) == SQLITE_OK)	{		BindParam(stmt, 1, eid);                if (sqlite3_step(stmt) == SQLITE_ROW)        {            int nCount = sqlite3_column_int(stmt, 0);                        if (nCount > 0)                ret = TRUE;        }                sqlite3_finalize(stmt);	}	else	{		CM_ERRP("sqlite3_step %s failed.error:%s", sql, sqlite3_errmsg(db));	}        return ret;}//从XML中读取对应Question的剩余时间和当前做到的题数BOOL CMExamList::GetExamData(const char* eid, TExamListItem& item){    BOOL ret = FALSE;    CMString sPath = CMGlobal::TheOne().GetUserDir() + L"examexercise.xml";	TiXmlDocument *pDoc = new TiXmlDocument(sPath);    	if(!pDoc)		return ret;	if(CMFile::FileExist(sPath))	{		pDoc->LoadFile(TIXML_ENCODING_UTF8);        		if(!pDoc->Error())		{			TiXmlElement *pRoot = pDoc->RootElement();			if(pRoot)			{				TiXmlElement* pQuestion = pRoot->FirstChildElement("question");				while(pQuestion)				{					const char* sid = pQuestion->Attribute("id");                    					if (strcmp(sid, eid) == 0)					{                        int nDuration = 0;                        pQuestion->QueryIntAttribute("duration", &nDuration);                                                if (nDuration > 0)                        {                            item.nRemainTime = nDuration;                                                        pQuestion->QueryIntAttribute("index", &item.nCurrIndex);                                                        ret = TRUE;                            break;                        }                    }                    pQuestion = pQuestion->NextSiblingElement("question");                }            }        }    }    	SAFEDELETE(pDoc);        return ret;}void CMExamList::OnSessionCmd(unsigned int nCmdID, unsigned int nCode, TiXmlDocument* pDoc){    INT32 result = TResult::EUnknownError;    if(nCode == MER_OK)    {        //获得根元素res。        TiXmlElement *pItem = pDoc->RootElement();                if(pItem)        {            INT32 nCmdID = 0;            pItem->QueryIntAttribute("no", &nCmdID);                        INT32 nErr = 0;            if(pItem->QueryIntAttribute("errno", &nErr) == TIXML_SUCCESS)            {                if (nErr == 0)                {                    sqlite3* db = CheckTable();                    if (m_lstItem) {                        m_lstItem->clear();                    }                    pItem = pItem->FirstChildElement("item");                    while (pItem)                    {                        TExamListItem item;                        //解析网络数据                        if (DoPutItem(pItem, db, item))                        {                            //判断数据库是否存在                            if (ExamExistAtList(item.sID.c_str()))                            {                            	//FIXME 由于有重考的功能  所以每次都取缓存  每次提交测验成功后都会清除改测验的缓存数据 保证重考数据正常                                //未完成的测验刷新本地保存的剩余时长等字段								Refresh(item);                            }                            else                            {                                //不存在则从XML取对应数据                                GetExamData(item.sID.c_str(), item);                            }                            //更新数据库                            Update(item);                            m_lstItem->push_back(item);                        }                        pItem = pItem->NextSiblingElement("item");                    }                    if(GetItemCount() > 0)						result = TResult::ESuccess;					else						result = TResult::ENothing;                }else if(nErr==TResult::EExamTimeOut)                	result=TResult::EExamTimeOut;            }            else{                result = TResult::ENetDisconnect;            }        }    }    else if(nCode == MERN_INITIALIZE)        result = TResult::ENetDisconnect;    else if(nCode == MERN_OFFLINE)        result = TResult::ENotSupportOffline;    else        result = TResult::ENetTimeout;    if(m_pListener)        m_pListener->OnUpdateDataFinish(m_UserData, result);}
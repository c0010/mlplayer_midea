//
//  CMGroupInfoExitViewController.m
//  MLPlayer
//
//  Created by kyp on 14-6-17.
//  Copyright (c) 2014年 w. All rights reserved.
//

#import "CMGroupInfoExitViewController.h"
#import "CMTableView.h"
#import "CMLabel.h"
#import "SDWebImage/SDImageCache.h"
#import "SDWebImage/UIImageView+WebCache.h"
#import "CMGroupNameViewController.h"
#import "CMGroupManagementViewController.h"
#import "CMGroupManagementMenuViewController.h"
#import "CMGroupManager.h"
#import "UITableViewCell+Helpper.h"
#import "SDWebImage/UIButton+WebCache.h"
#import "CMButton.h"
#import "CMAlertView.h"
#import "CMCoreDataUtils.h"
#import "CMInteractViewController.h"

#define GROUP_INFO_HEIGHT 80
#define GROUP_DESC_HEIGHT 130

#define kCMGroupInfoExitCellIdentifier @"com.apple.CMGroupInfoExitViewController.CellIdentifier"

@interface CMGroupInfoExitViewController ()

@end

@implementation CMGroupInfoExitViewController
@synthesize thetableView;

- (id)initWithNibName:(NSString *)nibNameOrNil bundle:(NSBundle *)nibBundleOrNil
{
    self = [super initWithNibName:nibNameOrNil bundle:nibBundleOrNil];
    if (self) {
        // Custom initialization
    }
    return self;
}

- (void)viewDidLoad
{
    [super viewDidLoad];
    
	thetableView = [[CMTableView alloc] initWithFrame:CGRectMake(10,0,UI_IOS_WINDOW_WIDTH - 20, UI_IOS_WINDOW_HEIGHT-20-44) style:UITableViewStylePlain];
	thetableView.delegate = self;
	thetableView.dataSource = self;
    [thetableView setSeparatorStyle:UITableViewCellSeparatorStyleNone];
    thetableView.showsVerticalScrollIndicator = NO;
    thetableView.backgroundColor = [UIColor clearColor];

	[self.view addSubview:thetableView];

    self.currGroupItem = (CMGroupItem *)[CMCoreDataUtils fetchManagedObject:NSStringFromClass([CMGroupItem class]) withPredicate:Pre_RoomJid(self.roomJid)];
    
    //刷新群信息
    [self refreshGroupInfo];

    [[NSNotificationCenter defaultCenter] addObserver:self selector:@selector(refreshGroupInfo) name:RefreshGroupInfoNSNotification object:nil];
}

//获取群信息
- (void)refreshGroupInfo{
    
    [self showActivityIndicator];
    
    WEAKSELF;
    [[CMGroupManager manager] doDetailyGroup:self.roomID success:^(TGroupInfoItem *group) {
        STRONGSELF;
        m_TGroupInfoItem = *group;
        //缓存
        [CMCoreDataUtils saveGruopCacheFromTGroupInfoItem:m_TGroupInfoItem resetJoined:NO];
        
        CMGroupItem *groupItem = (CMGroupItem *)[CMCoreDataUtils fetchManagedObject:NSStringFromClass([CMGroupItem class]) withPredicate:Pre_RoomJid(sself.roomJid)];
        groupItem.roomOwner = [NSString stringWithUTF8String:m_TGroupInfoItem.sOwner.c_str()];
        groupItem.roomNumber = [NSString stringWithUTF8String:m_TGroupInfoItem.sRoomNumber.c_str()];
        groupItem.userCount = [NSNumber numberWithInt:m_TGroupInfoItem.nUserCount];
        groupItem.flag = [NSNumber numberWithInt:m_TGroupInfoItem.nFlag];
        groupItem.occupant = [NSNumber numberWithInt:m_TGroupInfoItem.nIsOccupant];
        
        [MessageObjectContext save:NULL];

        sself.currGroupItem = groupItem;
        
        [sself.thetableView reloadData];
        
        sself.navigationItem.rightBarButtonItem = nil;
        
        [sself showRefreshButton];
    } failure:^(int errorCode) {
        STRONGSELF;
        [sself showRefreshButton];
    }];
}

- (void)showActivityIndicator{
    UIView *backView = [[UIView alloc]initWithFrame:CGRectMake(0, 0, kBarItemWidth, kBarItemHeight)];
    UIActivityIndicatorView *indicatorView = [[UIActivityIndicatorView alloc]initWithFrame:CGRectMake(20, 0, kBarItemWidth - 20, kBarItemHeight)];
    [indicatorView startAnimating];
    indicatorView.hidesWhenStopped = YES;
    [backView addSubview:indicatorView];
    
    if(!__iOS7)[indicatorView setFrameX:-10];
    UIBarButtonItem * rightBtnItem = [[UIBarButtonItem alloc]initWithCustomView:backView];
    
    self.navigationItem.rightBarButtonItem=rightBtnItem;
}

- (void)showRefreshButton{
    UIButton *rightBtn = [[UIButton alloc]initWithFrame:CGRectMake(0, 0, kBarItemWidth, kBarItemHeight)];
    [rightBtn setImageEdgeInsets:[self itemFitDifferentVersion:NO]];
    [rightBtn setImage:[UIImage imageNamed:@"refresh_icon.png"] forState:UIControlStateNormal];
    [rightBtn addTarget:self action:@selector(refreshGroupInfo) forControlEvents:UIControlEventTouchUpInside];
    UIBarButtonItem * rightBtnItem = [[UIBarButtonItem alloc]initWithCustomView:rightBtn];
    
    
    self.navigationItem.rightBarButtonItem=rightBtnItem;
}



-(void)loadTableList
{
    [tool DisimissActivityIndicator];
    
    [thetableView reloadData];
}


#pragma mark - Lifecycle

-(void)viewWillAppear:(BOOL)animated
{
    [super viewWillAppear:animated];
}


-(void)viewWillDisappear:(BOOL)animated
{
    [[NSNotificationCenter defaultCenter] removeObserver:self name:UIKeyboardWillShowNotification object:nil];
    
    [super viewWillDisappear:animated];
    
}



#pragma mark UITableView delegate methods

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
    [tableView deselectRowAtIndexPath:indexPath animated:YES];
    
    switch (indexPath.section) {
        case 0:
        {
            
            if ([self.currGroupItem.occupant intValue] == CMGroupMemberStateManager || [self.currGroupItem.occupant intValue] == CMGroupMemberStateCreater) {
                switch (indexPath.row) {
                    case 0:
                    {
                        CMGroupNameViewController *controller = [[CMGroupNameViewController alloc]initWithGroupItem:self.currGroupItem.roomName];
                        controller.title = I(@"群名称");
                        controller.editType = CMGroupEditNameType;
                        controller.roomID = self.currGroupItem.roomID;
                        [self.navigationController pushViewController:controller animated:YES];
                    }
                        break;
                    case 2:
                    {
                        CMGroupNameViewController *controller = [[CMGroupNameViewController alloc]initWithGroupItem:self.currGroupItem.desc];
                        controller.title = I(@"群简介");
                        controller.editType = CMGroupEditDescType;
                        controller.roomID = self.currGroupItem.roomID;
                        [self.navigationController pushViewController:controller animated:YES];
                    }
                        break;
                    default:
                        break;
                }
            }
        }
            break;
        case 1:
        {
            NSString *roomJid = [NSString stringWithUTF8String:m_TGroupInfoItem.sJID.c_str()];
            if (roomJid.length == 0) {
                m_TGroupInfoItem.sID = self.currGroupItem.roomID ? [self.currGroupItem.roomID UTF8String] : NULL;
                m_TGroupInfoItem.sJID = self.currGroupItem.roomJID ? [self.currGroupItem.roomJID UTF8String] : NULL;
                m_TGroupInfoItem.nFlag = self.currGroupItem.flag ? [self.currGroupItem.flag intValue] : 0;
                m_TGroupInfoItem.nIsOccupant = self.currGroupItem.occupant ? [self.currGroupItem.occupant intValue] : 0;
            }
            switch (indexPath.row) {
                case 0:
                {
                    CMGroupManagementViewController *controller = [[CMGroupManagementViewController alloc]init];
                    controller.title = I(@"群成员");
                    [controller setItem:m_TGroupInfoItem];
                    controller.editType = CMGroupMemberEditTypeRemove;
                    [self.navigationController pushViewController:controller animated:YES];
                }
                    break;
                case 1:
                {
                    CMGroupManagementMenuViewController *controller = [[CMGroupManagementMenuViewController alloc]init];
                    controller.title = I(@"群管理");
                    [controller setItem:m_TGroupInfoItem];
                    [self.navigationController pushViewController:controller animated:YES];
                }
                    break;
                default:
                    break;
            }
        }
            break;
        case 2:
        {
            WEAKSELF;
            if ([self.currGroupItem.occupant intValue] == CMGroupMemberStateCreater) {
                
                [[[CMAlertView alloc]initWithTitle:nil message:I(@"您是群主，退出后此群将解散！") cancelButtonTitle:I(@"取消") otherButtonTitles:I(@"确定") completionBlock:^(NSUInteger buttonIndex, CMAlertView *alertView) {
                    STRONGSELF;
                    if (buttonIndex != CMAlertViewCancel) {
                        [tool ShowActivityIndicator:self.view];
                        [[CMGroupManager manager] doDisblanGroup:self.currGroupItem.roomID success:^{
                            [sself doneLeaveGroup];
                        }];
                    }
                }] show];
                
                
            }else{
                
                [[[CMAlertView alloc]initWithTitle:nil message:[NSString stringWithFormat:I(@"退出 %@?"), self.currGroupItem.roomName] cancelButtonTitle:I(@"取消") otherButtonTitles:I(@"确定") completionBlock:^(NSUInteger buttonIndex, CMAlertView *alertView) {
                    if (buttonIndex != CMAlertViewCancel) {
                        [tool ShowActivityIndicator:self.view];
                        [[CMGroupManager manager] doExitGroup:self.currGroupItem.roomID success:^{
                            STRONGSELF;
                            [sself doneLeaveGroup];
                        }];
                    }
                }] show];
            }
        }
            break;
        default:
            break;
    }
}

- (void) gotoBack{
    
    [[NSNotificationCenter defaultCenter] removeObserver:self];

    [super gotoBack];

}

- (void)doneLeaveGroup{
    
    [[NSNotificationCenter defaultCenter] removeObserver:self];

    //发送xmpp协议
    [[CMGroupManager managerDelegate] leaveWithJid:self.currGroupItem.roomJID];
    
    [CMCoreDataUtils clearAllCacheWithRoomJid:self.currGroupItem.roomJID];

    [self.navigationController popToRootViewControllerAnimated:YES];
}
#pragma mark UITableView data source methods

// tell our table how many sections or groups it will have (always 1(our case)
- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView
{
	return 3;
}


- (CGFloat)tableView:(UITableView *)tableView heightForRowAtIndexPath:(NSIndexPath *)indexPath
{
    if (indexPath.section == 0) {
        if (indexPath.row == 0) {
             return GROUP_INFO_HEIGHT;
        }else if (indexPath.row == 2){
            return GROUP_DESC_HEIGHT;
        }
    }
    return 44;
}
// tell our table how many rows it will have,(our case the size of our menuList
- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
	switch (section) {
		case 0:
			return 3;
		case 1:
            if([self.currGroupItem.occupant intValue] == CMGroupMemberStateCreater || [self.currGroupItem.occupant intValue] == CMGroupMemberStateManager){
                return 2;
            }else{
                return 1;
            }
        case 2:
			return 1;
		default:
			break;
	}
    
	return 0;
}

// tell our table what kind of cell to use and its title for the given row
- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
    UITableViewCell *cell = (UITableViewCell*)[thetableView dequeueReusableCellWithIdentifier:kCMGroupInfoExitCellIdentifier];
    
	if (cell == nil) {
        cell = [[UITableViewCell alloc] initWithStyle:((indexPath.section == 1 && indexPath.row == 0)  || (indexPath.section == 0 && indexPath.row == 1) )? UITableViewCellStyleValue1 : UITableViewCellStyleDefault reuseIdentifier:kCMGroupInfoExitCellIdentifier];
        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
    }

    for (UIView *subView in cell.contentView.subviews) {
        [subView removeFromSuperview];
    }
    
    switch (indexPath.section) {
        case 0:
        {
            switch (indexPath.row) {
                case 0:
                {
                    CMButton *imageView = [[CMButton alloc]initWithFrame:CGRectMake(10, 10, 60, 60)];
                    imageView.isRound = YES;
                    WEAKSELF;
                    [imageView setOnClickListener:^(CMButton * sender){
                        STRONGSELF;
                        if ([sself.currGroupItem.occupant intValue] == CMGroupMemberStateManager || [sself.currGroupItem.occupant intValue] == CMGroupMemberStateCreater) {
                            [sself showActionSheet];
                        }
                    }];
                    
                    [imageView sd_setImageWithURL:[NSURL URLWithString:self.currGroupItem.icon] forState:UIControlStateNormal placeholderImage:DefaultGroupImage];
                    [cell.contentView addSubview:imageView];

                    
                    UILabel *titleLabel = [[UILabel alloc] init];
                    titleLabel.frame = CGRectMake(85, 10, 175, 23);
                    titleLabel.backgroundColor = [UIColor clearColor];
                    titleLabel.numberOfLines = 1;
                    titleLabel.font = [UIFont systemFontOfSize:17];
                    [cell.contentView addSubview:titleLabel];
                    titleLabel.text = self.currGroupItem.roomName;
                    
                    
                    CMLabel *detailLabel = [[CMLabel alloc] init];
                    detailLabel.frame = CGRectMake(85, 50, 175, 19);
                    detailLabel.backgroundColor = [UIColor clearColor];
                    detailLabel.font =[UIFont systemFontOfSize:14];
                    detailLabel.textColor = [UIColor lightGrayColor];
                    detailLabel.text = [NSString stringWithFormat:@"群主:%@",self.currGroupItem.roomOwner ? self.currGroupItem.roomOwner : @""];
                    [cell.contentView addSubview:detailLabel];
                    cell.selectionStyle = UITableViewCellSelectionStyleNone;

                    if ([self.currGroupItem.occupant intValue] == CMGroupMemberStateManager || [self.currGroupItem.occupant intValue] == CMGroupMemberStateCreater) {
                        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
                        cell.selectionStyle = UITableViewCellSelectionStyleGray;
                    }else{
                        cell.accessoryType = UITableViewCellAccessoryNone;
                        cell.selectionStyle = UITableViewCellSelectionStyleNone;
                    }
                }
                    break;
                case 1:
                {
                    UILabel *titleLabel = [[UILabel alloc] init];
                    titleLabel.frame = CGRectMake(10, 0, 100, 44);
                    titleLabel.backgroundColor = [UIColor clearColor];
                    titleLabel.font = [UIFont systemFontOfSize:17];
                    titleLabel.textColor = [UIColor blackColor];
                    titleLabel.text = I(@"群编号");
                    [cell.contentView addSubview:titleLabel];
                    
                    cell.detailTextLabel.text = self.currGroupItem.roomNumber;
                    cell.detailTextLabel.textColor = [UIColor lightGrayColor];
                    cell.selectionStyle = UITableViewCellSelectionStyleNone;
                    cell.accessoryType = UITableViewCellAccessoryNone;
                    break;
                }
                case 2:
                {
                    UILabel *titleLabel = [[UILabel alloc] init];
                    titleLabel.frame = CGRectMake(10, 10, 180, 23);
                    titleLabel.font = [UIFont systemFontOfSize:17];
                    titleLabel.textColor = [UIColor blackColor];
                    titleLabel.backgroundColor = [UIColor clearColor];
                    [cell.contentView addSubview:titleLabel];
                    titleLabel.text= I(@"群简介");
                    
                    CMLabel *detailLabel=[[CMLabel alloc]init];
                    detailLabel.backgroundColor = [UIColor clearColor];
                    detailLabel.textColor = [UIColor lightGrayColor];
                    NSString* str = @"";
                    if (self.currGroupItem.desc) {
                        str = self.currGroupItem.desc;
                    }
                    UIFont *cellFont = [UIFont systemFontOfSize:kTextSizeMid];
                    CGSize constraintSize = CGSizeMake(260, 80);
                    
                    CGSize labelSize=[str sizeWithFont:cellFont constrainedToSize:constraintSize lineBreakMode:UILineBreakModeWordWrap];
                    detailLabel.frame = CGRectMake(10, 43, labelSize.width, labelSize.height + 5);
                    
                    detailLabel.numberOfLines=0;
                    detailLabel.font = cellFont;
                    detailLabel.lineBreakMode=UILineBreakModeWordWrap | UILineBreakModeTailTruncation;
                    
                    [detailLabel setText:str  WithFont:[UIFont systemFontOfSize:kTextSizeMid] AndColor:UIColorRGB(0X333333)];
                    [cell.contentView addSubview:detailLabel];
                    
                    cell.selectionStyle = UITableViewCellSelectionStyleNone;
                    
                    if ([self.currGroupItem.occupant intValue] == CMGroupMemberStateManager || [self.currGroupItem.occupant intValue] == CMGroupMemberStateCreater) {
                        cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
                        cell.selectionStyle = UITableViewCellSelectionStyleGray;
                    }else{
                        cell.accessoryType = UITableViewCellAccessoryNone;
                        cell.selectionStyle = UITableViewCellSelectionStyleNone;
                    }
                }
                    break;
                default:
                    break;
            }
        }
            
            break;
            
        case 1:
        {
            switch (indexPath.row) {
                case 0:
                {
                    UILabel *titleLabel = [[UILabel alloc] init];
                    titleLabel.frame = CGRectMake(10, 0, 100, 44);
                    titleLabel.backgroundColor = [UIColor clearColor];
                    titleLabel.font = [UIFont systemFontOfSize:17];
                    titleLabel.textColor = [UIColor blackColor];
                    titleLabel.text = I(@"群成员");
                    [cell.contentView addSubview:titleLabel];
                    
                    cell.detailTextLabel.text = [NSString stringWithFormat:@"%d人",[self.currGroupItem.userCount intValue]];
                    cell.detailTextLabel.textColor = [UIColor lightGrayColor];
                }
                    break;
                case 1:
                {
                    UILabel *titleLabel = [[UILabel alloc] init];
                    titleLabel.frame = CGRectMake(10, 0, 100, 44);
                    titleLabel.backgroundColor = [UIColor clearColor];
                    titleLabel.font = [UIFont systemFontOfSize:17];
                    titleLabel.textColor = [UIColor blackColor];
                    titleLabel.text = I(@"群管理");
                    [cell.contentView addSubview:titleLabel];
                    
                    cell.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
                }
                    break;
                default:
                    break;
            }
        }
            break;
        case 2:
        {
            UILabel *titleLabel = [[UILabel alloc] initWithFrame:CGRectMake(100, 0, 100, 44)];
            titleLabel.backgroundColor = [UIColor clearColor];
            titleLabel.textAlignment= UITextAlignmentCenter;
            titleLabel.font = [UIFont systemFontOfSize:18];
            titleLabel.textColor = [UIColor redColor];
            if ([self.currGroupItem.occupant intValue] == CMGroupMemberStateCreater) {
                titleLabel.text = I(@"解散群");
            }else{
                titleLabel.text = I(@"退出群");
            }
            [cell.contentView addSubview:titleLabel];
            
            cell.accessoryType = UITableViewCellAccessoryNone;
        }
            break;
        default:
            break;
    }
    [cell setRoundSection:[self tableView:tableView numberOfRowsInSection:indexPath.section] atIndex:indexPath.row height:[self tableView:tableView heightForRowAtIndexPath:indexPath]];
    
    return cell;
}

- ( CGFloat )tableView:( UITableView *)tableView heightForHeaderInSection:(NSInteger )section
{
    
    if (section == 0) {
        return 10.0 ;
    }
    return 24.0 ;
    
}

- (UIView *)tableView:(UITableView *)tableView viewForHeaderInSection:(NSInteger)section{
    return [[UIView alloc]initWithFrame:CGRectZero];
}

- ( CGFloat )tableView:( UITableView *)tableView heightForFooterInSection:(NSInteger )section
{
    
    if (section == 2) {
        return 24.0 ;
    }
    return 0.0 ;
    
}

- (UIView *)tableView:(UITableView *)tableView viewForFooterInSection:(NSInteger)section{
    return [[UIView alloc]initWithFrame:CGRectZero];
}

- (void)showActionSheet{
    UIActionSheet *action = [[UIActionSheet alloc] initWithTitle:nil
                                                        delegate:self
                                               cancelButtonTitle:I(@"取消")
                                          destructiveButtonTitle:nil
                                               otherButtonTitles:I(@"相册"),I(@"相机"), nil];
    [action showInView:self.view.superview];
}

- (void)actionSheet:(UIActionSheet *)actionSheet clickedButtonAtIndex:(NSInteger)buttonIndex{
    if (buttonIndex != actionSheet.cancelButtonIndex) {
        switch (buttonIndex) {
            case 0:
            {
                UIImagePickerController *picker =[[UIImagePickerController alloc] init];
                picker.delegate = self;
                picker.sourceType = UIImagePickerControllerSourceTypePhotoLibrary;
                picker.allowsEditing = YES;
                
                if (__iOS7)
                {
                    //[[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent animated:YES];
                    MLPlayerAppDelegate *appDelegate = [[UIApplication sharedApplication] delegate];
                    appDelegate.window.tintColor = [UIColor whiteColor];
                }
                [self presentModalViewController:picker animated:YES];
            }
                break;
            case 1:
            {
                if ([UIImagePickerController isSourceTypeAvailable: UIImagePickerControllerSourceTypeCamera])
                {
                    UIImagePickerController *picker = [[UIImagePickerController alloc] init];
                    picker.delegate = self;
                    picker.allowsEditing = YES;
                    picker.sourceType = UIImagePickerControllerSourceTypeCamera;
                    [self presentModalViewController:picker animated:YES];
                }
                else
                {
                    UIAlertView *alert = [[UIAlertView alloc]
                                          initWithTitle:@"Error accessing photo library"
                                          message:@"Device does not support a photo library"
                                          delegate:nil
                                          cancelButtonTitle:@"ok!"
                                          otherButtonTitles:nil];
                    [alert show];
                }
            }
                break;
            default:
                break;
        }
        
    }
}

#pragma mark UIImagePickerControllerDelegate
- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary *)info{
    
    UIImage* oralImg=[info objectForKey:UIImagePickerControllerEditedImage];
    
    double image_w = oralImg.size.width;
    double image_h = oralImg.size.height;
    
    if (image_h > 110)
    {
        image_h = 110;
    }
    
    if (image_w > 100)
    {
        image_w = 110;
    }
    
    oralImg = [self scaleFromImage:oralImg toSize:CGSizeMake(image_w, image_h)];
    
    //保存到本地
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
    NSString *cachesDir = [paths objectAtIndex:0];
    
    //    strImageName = [cachesDir stringByAppendingPathComponent:[strDate stringByAppendingString:@".png"]];
    NSString *imagePath = [cachesDir stringByAppendingPathComponent:@"grouptemp.png"];
    NSError* err=nil;
    
    if(![UIImagePNGRepresentation(oralImg) writeToFile:imagePath options:NSDataWritingAtomic error:&err])
        NSLog(@"save file failed :err%@",[err localizedFailureReason]);
    
    [picker dismissModalViewControllerAnimated:YES];
    
    [[CMGroupManager manager] doUploadGroupHeaderWithRoomid:self.roomID imagePath:imagePath success:^(NSString *url) {
        self.currGroupItem.icon = url;
        
        CMGroupItem *groupItem = (CMGroupItem *)[CMCoreDataUtils fetchManagedObject:NSStringFromClass([CMGroupItem class]) withPredicate:Pre_RoomJid(self.roomJid)];

        groupItem.icon = url;
        
        CMDialogueItem *dailogueItem = (CMDialogueItem *)[CMCoreDataUtils fetchManagedObject:NSStringFromClass([CMDialogueItem class]) withPredicate:Pre_RoomJid(self.roomJid)];
        
        dailogueItem.icon = url;
        
        [MessageObjectContext save:NULL];
        
//        [[NSNotificationCenter defaultCenter] postNotificationName:RefreshGroupInfoNSNotification object:nil];

        //刷新tableview
        [self.thetableView reloadRowsAtIndexPaths:[NSArray arrayWithObject:[NSIndexPath indexPathForRow:0 inSection:0] ] withRowAnimation:UITableViewRowAnimationNone];
    } failure:^(int errorCode) {
        
    }];
   
    if (__iOS7)
    {
        //[[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent animated:YES];
        MLPlayerAppDelegate *appDelegate = [[UIApplication sharedApplication] delegate];
        appDelegate.window.tintColor = UIColorRGB(0x1a6cc3);
    }
}

- (UIImage *) scaleFromImage: (UIImage *) image toSize: (CGSize) size
{
    UIGraphicsBeginImageContext(size);
    [image drawInRect:CGRectMake(0, 0, size.width, size.height)];
    UIImage *newImage = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    return newImage;
}

- (void)imagePickerControllerDidCancel:(UIImagePickerController *)picker
{
    [picker dismissModalViewControllerAnimated:YES];
    
    if (__iOS7)
    {
        //[[UIApplication sharedApplication] setStatusBarStyle:UIStatusBarStyleLightContent animated:YES];

        MLPlayerAppDelegate *appDelegate = [[UIApplication sharedApplication] delegate];
        appDelegate.window.tintColor = UIColorRGB(0x1a6cc3);
    }
}

//聊天界面
- (void) exitGroupButtonPressed:(UIButton *)button{
    
}

- (void)didReceiveMemoryWarning
{
    [super didReceiveMemoryWarning];
    // Dispose of any resources that can be recreated.
}

/*
#pragma mark - Navigation

// In a storyboard-based application, you will often want to do a little preparation before navigation
- (void)prepareForSegue:(UIStoryboardSegue *)segue sender:(id)sender
{
    // Get the new view controller using [segue destinationViewController].
    // Pass the selected object to the new view controller.
}
*/

@end
